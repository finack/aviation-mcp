/* tslint:disable */
/* eslint-disable */
/**
 * AviationWeather.gov API
 * New data API of AviationWeather.gov. This supercedes the ADDS Data Server and AviationWeather Web Services.
 *
 * The version of the OpenAPI document: 3.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DataCWA200Response,
} from '../models/index';
import {
    DataCWA200ResponseFromJSON,
    DataCWA200ResponseToJSON,
} from '../models/index';

export interface DataAirportRequest {
    ids?: string;
    bbox?: string;
    format?: DataAirportFormatEnum;
}

export interface DataAreaFcstRequest {
    region: DataAreaFcstRegionEnum;
}

export interface DataCWARequest {
    hazard?: DataCWAHazardEnum;
    date?: string;
}

export interface DataFcstDiscRequest {
    cwa?: string;
    type?: DataFcstDiscTypeEnum;
}

export interface DataFeatureRequest {
    bbox?: string;
    format?: DataFeatureFormatEnum;
}

export interface DataFixRequest {
    ids?: string;
    bbox?: string;
    format?: DataFixFormatEnum;
}

export interface DataGAIRMETRequest {
    type?: DataGAIRMETTypeEnum;
    format?: DataGAIRMETFormatEnum;
    hazard?: DataGAIRMETHazardEnum;
    date?: string;
}

export interface DataMISRequest {
    loc?: string;
}

export interface DataMetarsRequest {
    ids?: string;
    format?: DataMetarsFormatEnum;
    taf?: boolean;
    hours?: number;
    bbox?: string;
    date?: string;
}

export interface DataNavaidRequest {
    ids?: string;
    bbox?: string;
    format?: DataNavaidFormatEnum;
}

export interface DataObstacleRequest {
    bbox?: string;
    format?: DataObstacleFormatEnum;
}

export interface DataPIREPPHPRequest {
    id?: string;
    format?: DataPIREPPHPFormatEnum;
    age?: number;
    distance?: number;
    level?: number;
    inten?: DataPIREPPHPIntenEnum;
    date?: string;
}

export interface DataSIGMETRequest {
    format?: DataSIGMETFormatEnum;
    hazard?: DataSIGMETHazardEnum;
    level?: number;
    date?: string;
}

export interface DataStationInfoRequest {
    ids?: string;
    bbox?: string;
    format?: DataStationInfoFormatEnum;
}

export interface DataTafRequest {
    ids?: string;
    format?: DataTafFormatEnum;
    metar?: boolean;
    bbox?: string;
    time?: DataTafTimeEnum;
    date?: string;
}

export interface DataWindTempRequest {
    region?: DataWindTempRegionEnum;
    level?: DataWindTempLevelEnum;
    fcst?: DataWindTempFcstEnum;
}

export interface DataiSIGMETRequest {
    format?: DataiSIGMETFormatEnum;
    hazard?: DataiSIGMETHazardEnum;
    level?: number;
    date?: string;
}

/**
 * DataApi - interface
 * 
 * @export
 * @interface DataApiInterface
 */
export interface DataApiInterface {
    /**
     * Information about airports
     * @summary Airport info
     * @param {string} [ids] Station ID(s)
     * @param {string} [bbox] Geographic bounding box (lat0, lon0, lat1, lon1)
     * @param {'decoded' | 'json' | 'geojson'} [format] Format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    dataAirportRaw(requestParameters: DataAirportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Information about airports
     * Airport info
     */
    dataAirport(requestParameters: DataAirportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Text Area Forecasts for the United States outside the contiguous states
     * @summary US Area Forecasts
     * @param {'aknorth' | 'akcentral' | 'akaleutian' | 'aksouth' | 'aksouthwest' | 'aksoutheast' | 'akpanhandle'} region Date  * &#x60;aknorth&#x60; - Northern half of Alaska  * &#x60;akcentral&#x60; - Interior Alaska  * &#x60;aksouth&#x60; - Southcentral Alaska  * &#x60;aksouthwest&#x60; - Alaska Penninsula  * &#x60;aksoutheast&#x60; - Eastern Gulf of Alaska  * &#x60;akpanhandle&#x60; - Alaska 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    dataAreaFcstRaw(requestParameters: DataAreaFcstRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Text Area Forecasts for the United States outside the contiguous states
     * US Area Forecasts
     */
    dataAreaFcst(requestParameters: DataAreaFcstRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Center Weather Advisories issued by NWS Center Weather Service Units (CWSUs)
     * @summary CWSU Center Advisories
     * @param {'ts' | 'turb' | 'ice' | 'ifr' | 'pcpn' | 'unk'} [hazard] Hazard
     * @param {string} [date] Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    dataCWARaw(requestParameters: DataCWARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Center Weather Advisories issued by NWS Center Weather Service Units (CWSUs)
     * CWSU Center Advisories
     */
    dataCWA(requestParameters: DataCWARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Aviation Forecast Discussions issued by NWS Weather Forecast Offices
     * @summary US Forecast Discussions
     * @param {string} [cwa] County Warning Area (WFO)
     * @param {'afd' | 'af'} [type] Type of output:  * &#x60;afd&#x60; - aviation discussion  * &#x60;af&#x60; - full discussion 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    dataFcstDiscRaw(requestParameters: DataFcstDiscRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Aviation Forecast Discussions issued by NWS Weather Forecast Offices
     * US Forecast Discussions
     */
    dataFcstDisc(requestParameters: DataFcstDiscRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Additional geographic features
     * @summary Feature info
     * @param {string} [bbox] Geographic bounding box (lat0, lon0, lat1, lon1)
     * @param {'raw' | 'json' | 'geojson'} [format] Format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    dataFeatureRaw(requestParameters: DataFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Additional geographic features
     * Feature info
     */
    dataFeature(requestParameters: DataFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Naviagtional fix data
     * @summary Naviagtional fix info
     * @param {string} [ids] 5 letter Fix ID(s)
     * @param {string} [bbox] Geographic bounding box (lat0, lon0, lat1, lon1)
     * @param {'raw' | 'json' | 'geojson'} [format] Format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    dataFixRaw(requestParameters: DataFixRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Naviagtional fix data
     * Naviagtional fix info
     */
    dataFix(requestParameters: DataFixRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Decoded G-AIRMETs for the contiguous United States
     * @summary US Graphical AIRMETs
     * @param {'sierra' | 'tango' | 'zulu'} [type] Product type
     * @param {'decoded' | 'json' | 'geojson' | 'xml'} [format] Format
     * @param {'turb-hi' | 'turb-lo' | 'llws' | 'sfc_wind' | 'ifr' | 'mtn_obs' | 'ice' | 'fzlvl'} [hazard] Hazard
     * @param {string} [date] Date (yyyymmdd_hhmm)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    dataGAIRMETRaw(requestParameters: DataGAIRMETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Decoded G-AIRMETs for the contiguous United States
     * US Graphical AIRMETs
     */
    dataGAIRMET(requestParameters: DataGAIRMETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Meteorological Information Statements issued by NWS Center Weather Service Units (CWSU)
     * @summary Meteorological Information Statement
     * @param {string} [loc] CWSU
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    dataMISRaw(requestParameters: DataMISRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Meteorological Information Statements issued by NWS Center Weather Service Units (CWSU)
     * Meteorological Information Statement
     */
    dataMIS(requestParameters: DataMISRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Decoded aviation weather observations
     * @summary METARs
     * @param {string} [ids] Station ID(s)
     * @param {'raw' | 'json' | 'geojson' | 'xml' | 'html'} [format] Format
     * @param {boolean} [taf] Include TAF
     * @param {number} [hours] Hours back to search
     * @param {string} [bbox] Geographic bounding box (lat0, lon0, lat1, lon1)
     * @param {string} [date] Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    dataMetarsRaw(requestParameters: DataMetarsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Decoded aviation weather observations
     * METARs
     */
    dataMetars(requestParameters: DataMetarsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Navigational aid data
     * @summary Navigational aid info
     * @param {string} [ids] 5 letter Fix ID(s)
     * @param {string} [bbox] Geographic bounding box (lat0, lon0, lat1, lon1)
     * @param {'raw' | 'json' | 'geojson'} [format] Format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    dataNavaidRaw(requestParameters: DataNavaidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Navigational aid data
     * Navigational aid info
     */
    dataNavaid(requestParameters: DataNavaidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Aviation obstacle information
     * @summary Obstacle info
     * @param {string} [bbox] Geographic bounding box (lat0, lon0, lat1, lon1)
     * @param {'raw' | 'json' | 'geojson'} [format] Format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    dataObstacleRaw(requestParameters: DataObstacleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Aviation obstacle information
     * Obstacle info
     */
    dataObstacle(requestParameters: DataObstacleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Pilot reports issued in PIREP or AIREP format
     * @summary Pilot Reports
     * @param {string} [id] Station ID
     * @param {'raw'} [format] Format
     * @param {number} [age] Hours Back
     * @param {number} [distance] Distance
     * @param {number} [level] Level +-3000\&#39; to search
     * @param {'lgt' | 'mod' | 'sev'} [inten] Minimum intensity
     * @param {string} [date] Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    dataPIREPPHPRaw(requestParameters: DataPIREPPHPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Pilot reports issued in PIREP or AIREP format
     * Pilot Reports
     */
    dataPIREPPHP(requestParameters: DataPIREPPHPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Domestic SIGMETs for the United States. Does not include SIGMETs issued by the US in international format. Domestic AIRMETs have been discontinued; see G-AIRMET.
     * @summary Domestic SIGMETs
     * @param {'raw' | 'json' | 'xml'} [format] Format
     * @param {'conv' | 'turb' | 'ice' | 'ifr'} [hazard] Hazard
     * @param {number} [level] The level +-3000\&#39; to search
     * @param {string} [date] Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    dataSIGMETRaw(requestParameters: DataSIGMETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Domestic SIGMETs for the United States. Does not include SIGMETs issued by the US in international format. Domestic AIRMETs have been discontinued; see G-AIRMET.
     * Domestic SIGMETs
     */
    dataSIGMET(requestParameters: DataSIGMETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Station observation location information
     * @summary Station info
     * @param {string} [ids] Station ID(s)
     * @param {string} [bbox] Geographic bounding box (lat0, lon0, lat1, lon1)
     * @param {'raw' | 'json' | 'geojson' | 'xml'} [format] Format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    dataStationInfoRaw(requestParameters: DataStationInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Station observation location information
     * Station info
     */
    dataStationInfo(requestParameters: DataStationInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Decoded Terminal Aerodrome Forecast products
     * @summary TAFs
     * @param {string} [ids] Station ID(s)
     * @param {'raw' | 'json' | 'geojson' | 'xml' | 'html'} [format] Format
     * @param {boolean} [metar] Include METAR
     * @param {string} [bbox] Geographic bounding box (lat0, lon0, lat1, lon1)
     * @param {'valid' | 'issue'} [time] Process time by valid (default) or issuance time
     * @param {string} [date] Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    dataTafRaw(requestParameters: DataTafRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Decoded Terminal Aerodrome Forecast products
     * TAFs
     */
    dataTaf(requestParameters: DataTafRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Wind and temperature information from the legacy FD winds
     * @summary Wind/Temp Point Data
     * @param {'us' | 'bos' | 'mia' | 'chi' | 'dfw' | 'slc' | 'sfo' | 'alaska' | 'hawaii' | 'other_pac'} [region] Region:  * &#x60;all&#x60; - All sites  * &#x60;bos&#x60; - Northeast  * &#x60;mia&#x60; - Southeast  * &#x60;chi&#x60; - North central  * &#x60;dfw&#x60; - South central  * &#x60;slc&#x60; - Rocky Mountain  * &#x60;sfo&#x60; - Pacific Coast  * &#x60;alaska&#x60; - Alaska  * &#x60;hawaii&#x60; - Hawaii  * &#x60;other_pac&#x60; - Western Pacific 
     * @param {'low' | 'high'} [level] Level
     * @param {'06' | '12' | '24'} [fcst] Forecast cycle
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    dataWindTempRaw(requestParameters: DataWindTempRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Wind and temperature information from the legacy FD winds
     * Wind/Temp Point Data
     */
    dataWindTemp(requestParameters: DataWindTempRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Decoded international SIGMETs. This does not include SIGMETs from the United States in domestic format.
     * @summary International SIGMETs
     * @param {'raw' | 'json' | 'xml'} [format] Format
     * @param {'turb' | 'ice'} [hazard] Hazard
     * @param {number} [level] Level +-3000\&#39; to search
     * @param {string} [date] Date  * &#x60;yyyymmdd_hhmm&#x60;  * &#x60;yyyy-mm-ddThh:mm:ssZ&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    dataiSIGMETRaw(requestParameters: DataiSIGMETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Decoded international SIGMETs. This does not include SIGMETs from the United States in domestic format.
     * International SIGMETs
     */
    dataiSIGMET(requestParameters: DataiSIGMETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class DataApi extends runtime.BaseAPI implements DataApiInterface {

    /**
     * Information about airports
     * Airport info
     */
    async dataAirportRaw(requestParameters: DataAirportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['bbox'] != null) {
            queryParameters['bbox'] = requestParameters['bbox'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/data/airport`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Information about airports
     * Airport info
     */
    async dataAirport(requestParameters: DataAirportRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dataAirportRaw(requestParameters, initOverrides);
    }

    /**
     * Text Area Forecasts for the United States outside the contiguous states
     * US Area Forecasts
     */
    async dataAreaFcstRaw(requestParameters: DataAreaFcstRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['region'] == null) {
            throw new runtime.RequiredError(
                'region',
                'Required parameter "region" was null or undefined when calling dataAreaFcst().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['region'] != null) {
            queryParameters['region'] = requestParameters['region'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/data/areafcst`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Text Area Forecasts for the United States outside the contiguous states
     * US Area Forecasts
     */
    async dataAreaFcst(requestParameters: DataAreaFcstRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dataAreaFcstRaw(requestParameters, initOverrides);
    }

    /**
     * Center Weather Advisories issued by NWS Center Weather Service Units (CWSUs)
     * CWSU Center Advisories
     */
    async dataCWARaw(requestParameters: DataCWARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters['hazard'] != null) {
            queryParameters['hazard'] = requestParameters['hazard'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/data/cwa`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Center Weather Advisories issued by NWS Center Weather Service Units (CWSUs)
     * CWSU Center Advisories
     */
    async dataCWA(requestParameters: DataCWARequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.dataCWARaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Aviation Forecast Discussions issued by NWS Weather Forecast Offices
     * US Forecast Discussions
     */
    async dataFcstDiscRaw(requestParameters: DataFcstDiscRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['cwa'] != null) {
            queryParameters['cwa'] = requestParameters['cwa'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/data/fcstdisc`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Aviation Forecast Discussions issued by NWS Weather Forecast Offices
     * US Forecast Discussions
     */
    async dataFcstDisc(requestParameters: DataFcstDiscRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dataFcstDiscRaw(requestParameters, initOverrides);
    }

    /**
     * Additional geographic features
     * Feature info
     */
    async dataFeatureRaw(requestParameters: DataFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['bbox'] != null) {
            queryParameters['bbox'] = requestParameters['bbox'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/data/feature`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Additional geographic features
     * Feature info
     */
    async dataFeature(requestParameters: DataFeatureRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dataFeatureRaw(requestParameters, initOverrides);
    }

    /**
     * Naviagtional fix data
     * Naviagtional fix info
     */
    async dataFixRaw(requestParameters: DataFixRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['bbox'] != null) {
            queryParameters['bbox'] = requestParameters['bbox'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/data/fix`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Naviagtional fix data
     * Naviagtional fix info
     */
    async dataFix(requestParameters: DataFixRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dataFixRaw(requestParameters, initOverrides);
    }

    /**
     * Decoded G-AIRMETs for the contiguous United States
     * US Graphical AIRMETs
     */
    async dataGAIRMETRaw(requestParameters: DataGAIRMETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['hazard'] != null) {
            queryParameters['hazard'] = requestParameters['hazard'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/data/gairmet`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Decoded G-AIRMETs for the contiguous United States
     * US Graphical AIRMETs
     */
    async dataGAIRMET(requestParameters: DataGAIRMETRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.dataGAIRMETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Meteorological Information Statements issued by NWS Center Weather Service Units (CWSU)
     * Meteorological Information Statement
     */
    async dataMISRaw(requestParameters: DataMISRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['loc'] != null) {
            queryParameters['loc'] = requestParameters['loc'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/data/mis`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Meteorological Information Statements issued by NWS Center Weather Service Units (CWSU)
     * Meteorological Information Statement
     */
    async dataMIS(requestParameters: DataMISRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dataMISRaw(requestParameters, initOverrides);
    }

    /**
     * Decoded aviation weather observations
     * METARs
     */
    async dataMetarsRaw(requestParameters: DataMetarsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['taf'] != null) {
            queryParameters['taf'] = requestParameters['taf'];
        }

        if (requestParameters['hours'] != null) {
            queryParameters['hours'] = requestParameters['hours'];
        }

        if (requestParameters['bbox'] != null) {
            queryParameters['bbox'] = requestParameters['bbox'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/data/metar`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Decoded aviation weather observations
     * METARs
     */
    async dataMetars(requestParameters: DataMetarsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dataMetarsRaw(requestParameters, initOverrides);
    }

    /**
     * Navigational aid data
     * Navigational aid info
     */
    async dataNavaidRaw(requestParameters: DataNavaidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['bbox'] != null) {
            queryParameters['bbox'] = requestParameters['bbox'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/data/navaid`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Navigational aid data
     * Navigational aid info
     */
    async dataNavaid(requestParameters: DataNavaidRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dataNavaidRaw(requestParameters, initOverrides);
    }

    /**
     * Aviation obstacle information
     * Obstacle info
     */
    async dataObstacleRaw(requestParameters: DataObstacleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['bbox'] != null) {
            queryParameters['bbox'] = requestParameters['bbox'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/data/obstacle`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Aviation obstacle information
     * Obstacle info
     */
    async dataObstacle(requestParameters: DataObstacleRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dataObstacleRaw(requestParameters, initOverrides);
    }

    /**
     * Pilot reports issued in PIREP or AIREP format
     * Pilot Reports
     */
    async dataPIREPPHPRaw(requestParameters: DataPIREPPHPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['age'] != null) {
            queryParameters['age'] = requestParameters['age'];
        }

        if (requestParameters['distance'] != null) {
            queryParameters['distance'] = requestParameters['distance'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['inten'] != null) {
            queryParameters['inten'] = requestParameters['inten'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/data/pirep`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Pilot reports issued in PIREP or AIREP format
     * Pilot Reports
     */
    async dataPIREPPHP(requestParameters: DataPIREPPHPRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dataPIREPPHPRaw(requestParameters, initOverrides);
    }

    /**
     * Domestic SIGMETs for the United States. Does not include SIGMETs issued by the US in international format. Domestic AIRMETs have been discontinued; see G-AIRMET.
     * Domestic SIGMETs
     */
    async dataSIGMETRaw(requestParameters: DataSIGMETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['hazard'] != null) {
            queryParameters['hazard'] = requestParameters['hazard'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/data/airsigmet`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Domestic SIGMETs for the United States. Does not include SIGMETs issued by the US in international format. Domestic AIRMETs have been discontinued; see G-AIRMET.
     * Domestic SIGMETs
     */
    async dataSIGMET(requestParameters: DataSIGMETRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dataSIGMETRaw(requestParameters, initOverrides);
    }

    /**
     * Station observation location information
     * Station info
     */
    async dataStationInfoRaw(requestParameters: DataStationInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['bbox'] != null) {
            queryParameters['bbox'] = requestParameters['bbox'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/data/stationinfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Station observation location information
     * Station info
     */
    async dataStationInfo(requestParameters: DataStationInfoRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dataStationInfoRaw(requestParameters, initOverrides);
    }

    /**
     * Decoded Terminal Aerodrome Forecast products
     * TAFs
     */
    async dataTafRaw(requestParameters: DataTafRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['metar'] != null) {
            queryParameters['metar'] = requestParameters['metar'];
        }

        if (requestParameters['bbox'] != null) {
            queryParameters['bbox'] = requestParameters['bbox'];
        }

        if (requestParameters['time'] != null) {
            queryParameters['time'] = requestParameters['time'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/data/taf`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Decoded Terminal Aerodrome Forecast products
     * TAFs
     */
    async dataTaf(requestParameters: DataTafRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dataTafRaw(requestParameters, initOverrides);
    }

    /**
     * Wind and temperature information from the legacy FD winds
     * Wind/Temp Point Data
     */
    async dataWindTempRaw(requestParameters: DataWindTempRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['region'] != null) {
            queryParameters['region'] = requestParameters['region'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['fcst'] != null) {
            queryParameters['fcst'] = requestParameters['fcst'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/data/windtemp`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Wind and temperature information from the legacy FD winds
     * Wind/Temp Point Data
     */
    async dataWindTemp(requestParameters: DataWindTempRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dataWindTempRaw(requestParameters, initOverrides);
    }

    /**
     * Decoded international SIGMETs. This does not include SIGMETs from the United States in domestic format.
     * International SIGMETs
     */
    async dataiSIGMETRaw(requestParameters: DataiSIGMETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['hazard'] != null) {
            queryParameters['hazard'] = requestParameters['hazard'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/data/isigmet`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Decoded international SIGMETs. This does not include SIGMETs from the United States in domestic format.
     * International SIGMETs
     */
    async dataiSIGMET(requestParameters: DataiSIGMETRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dataiSIGMETRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const DataAirportFormatEnum = {
    Decoded: 'decoded',
    Json: 'json',
    Geojson: 'geojson'
} as const;
export type DataAirportFormatEnum = typeof DataAirportFormatEnum[keyof typeof DataAirportFormatEnum];
/**
 * @export
 */
export const DataAreaFcstRegionEnum = {
    Aknorth: 'aknorth',
    Akcentral: 'akcentral',
    Akaleutian: 'akaleutian',
    Aksouth: 'aksouth',
    Aksouthwest: 'aksouthwest',
    Aksoutheast: 'aksoutheast',
    Akpanhandle: 'akpanhandle'
} as const;
export type DataAreaFcstRegionEnum = typeof DataAreaFcstRegionEnum[keyof typeof DataAreaFcstRegionEnum];
/**
 * @export
 */
export const DataCWAHazardEnum = {
    Ts: 'ts',
    Turb: 'turb',
    Ice: 'ice',
    Ifr: 'ifr',
    Pcpn: 'pcpn',
    Unk: 'unk'
} as const;
export type DataCWAHazardEnum = typeof DataCWAHazardEnum[keyof typeof DataCWAHazardEnum];
/**
 * @export
 */
export const DataFcstDiscTypeEnum = {
    Afd: 'afd',
    Af: 'af'
} as const;
export type DataFcstDiscTypeEnum = typeof DataFcstDiscTypeEnum[keyof typeof DataFcstDiscTypeEnum];
/**
 * @export
 */
export const DataFeatureFormatEnum = {
    Raw: 'raw',
    Json: 'json',
    Geojson: 'geojson'
} as const;
export type DataFeatureFormatEnum = typeof DataFeatureFormatEnum[keyof typeof DataFeatureFormatEnum];
/**
 * @export
 */
export const DataFixFormatEnum = {
    Raw: 'raw',
    Json: 'json',
    Geojson: 'geojson'
} as const;
export type DataFixFormatEnum = typeof DataFixFormatEnum[keyof typeof DataFixFormatEnum];
/**
 * @export
 */
export const DataGAIRMETTypeEnum = {
    Sierra: 'sierra',
    Tango: 'tango',
    Zulu: 'zulu'
} as const;
export type DataGAIRMETTypeEnum = typeof DataGAIRMETTypeEnum[keyof typeof DataGAIRMETTypeEnum];
/**
 * @export
 */
export const DataGAIRMETFormatEnum = {
    Decoded: 'decoded',
    Json: 'json',
    Geojson: 'geojson',
    Xml: 'xml'
} as const;
export type DataGAIRMETFormatEnum = typeof DataGAIRMETFormatEnum[keyof typeof DataGAIRMETFormatEnum];
/**
 * @export
 */
export const DataGAIRMETHazardEnum = {
    TurbHi: 'turb-hi',
    TurbLo: 'turb-lo',
    Llws: 'llws',
    SfcWind: 'sfc_wind',
    Ifr: 'ifr',
    MtnObs: 'mtn_obs',
    Ice: 'ice',
    Fzlvl: 'fzlvl'
} as const;
export type DataGAIRMETHazardEnum = typeof DataGAIRMETHazardEnum[keyof typeof DataGAIRMETHazardEnum];
/**
 * @export
 */
export const DataMetarsFormatEnum = {
    Raw: 'raw',
    Json: 'json',
    Geojson: 'geojson',
    Xml: 'xml',
    Html: 'html'
} as const;
export type DataMetarsFormatEnum = typeof DataMetarsFormatEnum[keyof typeof DataMetarsFormatEnum];
/**
 * @export
 */
export const DataNavaidFormatEnum = {
    Raw: 'raw',
    Json: 'json',
    Geojson: 'geojson'
} as const;
export type DataNavaidFormatEnum = typeof DataNavaidFormatEnum[keyof typeof DataNavaidFormatEnum];
/**
 * @export
 */
export const DataObstacleFormatEnum = {
    Raw: 'raw',
    Json: 'json',
    Geojson: 'geojson'
} as const;
export type DataObstacleFormatEnum = typeof DataObstacleFormatEnum[keyof typeof DataObstacleFormatEnum];
/**
 * @export
 */
export const DataPIREPPHPFormatEnum = {
    Raw: 'raw'
} as const;
export type DataPIREPPHPFormatEnum = typeof DataPIREPPHPFormatEnum[keyof typeof DataPIREPPHPFormatEnum];
/**
 * @export
 */
export const DataPIREPPHPIntenEnum = {
    Lgt: 'lgt',
    Mod: 'mod',
    Sev: 'sev'
} as const;
export type DataPIREPPHPIntenEnum = typeof DataPIREPPHPIntenEnum[keyof typeof DataPIREPPHPIntenEnum];
/**
 * @export
 */
export const DataSIGMETFormatEnum = {
    Raw: 'raw',
    Json: 'json',
    Xml: 'xml'
} as const;
export type DataSIGMETFormatEnum = typeof DataSIGMETFormatEnum[keyof typeof DataSIGMETFormatEnum];
/**
 * @export
 */
export const DataSIGMETHazardEnum = {
    Conv: 'conv',
    Turb: 'turb',
    Ice: 'ice',
    Ifr: 'ifr'
} as const;
export type DataSIGMETHazardEnum = typeof DataSIGMETHazardEnum[keyof typeof DataSIGMETHazardEnum];
/**
 * @export
 */
export const DataStationInfoFormatEnum = {
    Raw: 'raw',
    Json: 'json',
    Geojson: 'geojson',
    Xml: 'xml'
} as const;
export type DataStationInfoFormatEnum = typeof DataStationInfoFormatEnum[keyof typeof DataStationInfoFormatEnum];
/**
 * @export
 */
export const DataTafFormatEnum = {
    Raw: 'raw',
    Json: 'json',
    Geojson: 'geojson',
    Xml: 'xml',
    Html: 'html'
} as const;
export type DataTafFormatEnum = typeof DataTafFormatEnum[keyof typeof DataTafFormatEnum];
/**
 * @export
 */
export const DataTafTimeEnum = {
    Valid: 'valid',
    Issue: 'issue'
} as const;
export type DataTafTimeEnum = typeof DataTafTimeEnum[keyof typeof DataTafTimeEnum];
/**
 * @export
 */
export const DataWindTempRegionEnum = {
    Us: 'us',
    Bos: 'bos',
    Mia: 'mia',
    Chi: 'chi',
    Dfw: 'dfw',
    Slc: 'slc',
    Sfo: 'sfo',
    Alaska: 'alaska',
    Hawaii: 'hawaii',
    OtherPac: 'other_pac'
} as const;
export type DataWindTempRegionEnum = typeof DataWindTempRegionEnum[keyof typeof DataWindTempRegionEnum];
/**
 * @export
 */
export const DataWindTempLevelEnum = {
    Low: 'low',
    High: 'high'
} as const;
export type DataWindTempLevelEnum = typeof DataWindTempLevelEnum[keyof typeof DataWindTempLevelEnum];
/**
 * @export
 */
export const DataWindTempFcstEnum = {
    _06: '06',
    _12: '12',
    _24: '24'
} as const;
export type DataWindTempFcstEnum = typeof DataWindTempFcstEnum[keyof typeof DataWindTempFcstEnum];
/**
 * @export
 */
export const DataiSIGMETFormatEnum = {
    Raw: 'raw',
    Json: 'json',
    Xml: 'xml'
} as const;
export type DataiSIGMETFormatEnum = typeof DataiSIGMETFormatEnum[keyof typeof DataiSIGMETFormatEnum];
/**
 * @export
 */
export const DataiSIGMETHazardEnum = {
    Turb: 'turb',
    Ice: 'ice'
} as const;
export type DataiSIGMETHazardEnum = typeof DataiSIGMETHazardEnum[keyof typeof DataiSIGMETHazardEnum];
